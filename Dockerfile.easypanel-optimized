# ===============================================
# DOCKERFILE OPTIMIZADO PARA EASYPANEL
# ===============================================
# Sistema de Deploy Automático - IdeasDevOps
# Cotizador de Consumo Solar - Sumpetrol SA
# ===============================================

# Argumentos de construcción
ARG APP_NAME=cotizador-solar
ARG APP_VERSION=1.0.0
ARG APP_DESCRIPTION="Cotizador de Consumo Solar - Sumpetrol SA"
ARG PYTHON_REQUIREMENTS="fastapi uvicorn pydantic pydantic-settings reportlab python-multipart requests aiohttp python-dotenv apscheduler asyncio-mqtt"

# Imagen base: nginx + Python
FROM nginx:alpine

# Metadatos
LABEL maintainer="IdeasDevOps <admin@ideasdevops.com>"
LABEL app.name="${APP_NAME}"
LABEL app.version="${APP_VERSION}"
LABEL app.description="${APP_DESCRIPTION}"

# Variables de entorno
ENV APP_NAME=${APP_NAME}
ENV APP_VERSION=${APP_VERSION}
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV DEBIAN_FRONTEND=noninteractive

# Instalar dependencias del sistema
RUN apk add --no-cache \
    python3 \
    python3-dev \
    py3-pip \
    py3-setuptools \
    py3-wheel \
    build-base \
    linux-headers \
    supervisor \
    curl \
    bash \
    dumb-init \
    && ln -sf python3 /usr/bin/python \
    && ln -sf pip3 /usr/bin/pip

# Crear directorios necesarios
RUN mkdir -p \
    /data/logs/nginx \
    /data/logs/supervisor \
    /data/logs/python \
    /data/logs/node \
    /data/backups \
    /data/cache \
    /data/temp \
    /app/backend-python \
    /app/backend-node \
    /usr/share/nginx/html \
    /etc/supervisor/conf.d

# Copiar backend Python
COPY backend-python/ /app/backend-python/

# Instalar dependencias Python
RUN pip install --no-cache-dir --break-system-packages -r /app/backend-python/requirements.txt

# Copiar backend Node.js (si existe)
COPY backend-node/ /app/backend-node/

# Instalar dependencias Node.js (si existe)
RUN if [ -f "/app/backend-node/package.json" ]; then \
        cd /app/backend-node && npm install --production; \
    fi

# Copiar frontend
COPY frontend/ /usr/share/nginx/html/

# Crear configuración de nginx optimizada
RUN echo 'server {' > /etc/nginx/conf.d/default.conf && \
    echo '    listen 80 default_server;' >> /etc/nginx/conf.d/default.conf && \
    echo '    listen [::]:80 default_server;' >> /etc/nginx/conf.d/default.conf && \
    echo '    ' >> /etc/nginx/conf.d/default.conf && \
    echo '    root /usr/share/nginx/html;' >> /etc/nginx/conf.d/default.conf && \
    echo '    index index.html index.htm;' >> /etc/nginx/conf.d/default.conf && \
    echo '    ' >> /etc/nginx/conf.d/default.conf && \
    echo '    server_name _;' >> /etc/nginx/conf.d/default.conf && \
    echo '    ' >> /etc/nginx/conf.d/default.conf && \
    echo '    # Configuración de logs' >> /etc/nginx/conf.d/default.conf && \
    echo '    access_log /data/logs/nginx/access.log;' >> /etc/nginx/conf.d/default.conf && \
    echo '    error_log /data/logs/nginx/error.log;' >> /etc/nginx/conf.d/default.conf && \
    echo '    ' >> /etc/nginx/conf.d/default.conf && \
    echo '    # Configuración de archivos estáticos' >> /etc/nginx/conf.d/default.conf && \
    echo '    location / {' >> /etc/nginx/conf.d/default.conf && \
    echo '        try_files $uri $uri/ /index.html;' >> /etc/nginx/conf.d/default.conf && \
    echo '    }' >> /etc/nginx/conf.d/default.conf && \
    echo '    ' >> /etc/nginx/conf.d/default.conf && \
    echo '    # Proxy para API Python' >> /etc/nginx/conf.d/default.conf && \
    echo '    location /api/ {' >> /etc/nginx/conf.d/default.conf && \
    echo '        proxy_pass http://localhost:8000/;' >> /etc/nginx/conf.d/default.conf && \
    echo '        proxy_set_header Host $host;' >> /etc/nginx/conf.d/default.conf && \
    echo '        proxy_set_header X-Real-IP $remote_addr;' >> /etc/nginx/conf.d/default.conf && \
    echo '        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;' >> /etc/nginx/conf.d/default.conf && \
    echo '        proxy_set_header X-Forwarded-Proto $scheme;' >> /etc/nginx/conf.d/default.conf && \
    echo '        proxy_connect_timeout 30s;' >> /etc/nginx/conf.d/default.conf && \
    echo '        proxy_send_timeout 30s;' >> /etc/nginx/conf.d/default.conf && \
    echo '        proxy_read_timeout 30s;' >> /etc/nginx/conf.d/default.conf && \
    echo '    }' >> /etc/nginx/conf.d/default.conf && \
    echo '    ' >> /etc/nginx/conf.d/default.conf && \
    echo '    # Proxy para API Node.js' >> /etc/nginx/conf.d/default.conf && \
    echo '    location /node-api/ {' >> /etc/nginx/conf.d/default.conf && \
    echo '        proxy_pass http://localhost:8005/;' >> /etc/nginx/conf.d/default.conf && \
    echo '        proxy_set_header Host $host;' >> /etc/nginx/conf.d/default.conf && \
    echo '        proxy_set_header X-Real-IP $remote_addr;' >> /etc/nginx/conf.d/default.conf && \
    echo '        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;' >> /etc/nginx/conf.d/default.conf && \
    echo '        proxy_set_header X-Forwarded-Proto $scheme;' >> /etc/nginx/conf.d/default.conf && \
    echo '    }' >> /etc/nginx/conf.d/default.conf && \
    echo '    ' >> /etc/nginx/conf.d/default.conf && \
    echo '    # Health check endpoint' >> /etc/nginx/conf.d/default.conf && \
    echo '    location /health {' >> /etc/nginx/conf.d/default.conf && \
    echo '        access_log off;' >> /etc/nginx/conf.d/default.conf && \
    echo '        return 200 "healthy\n";' >> /etc/nginx/conf.d/default.conf && \
    echo '        add_header Content-Type text/plain;' >> /etc/nginx/conf.d/default.conf && \
    echo '    }' >> /etc/nginx/conf.d/default.conf && \
    echo '    ' >> /etc/nginx/conf.d/default.conf && \
    echo '    # Documentación API' >> /etc/nginx/conf.d/default.conf && \
    echo '    location /docs {' >> /etc/nginx/conf.d/default.conf && \
    echo '        proxy_pass http://localhost:8000/docs;' >> /etc/nginx/conf.d/default.conf && \
    echo '        proxy_set_header Host $host;' >> /etc/nginx/conf.d/default.conf && \
    echo '    }' >> /etc/nginx/conf.d/default.conf && \
    echo '    ' >> /etc/nginx/conf.d/default.conf && \
    echo '    # Redoc API' >> /etc/nginx/conf.d/default.conf && \
    echo '    location /redoc {' >> /etc/nginx/conf.d/default.conf && \
    echo '        proxy_pass http://localhost:8000/redoc;' >> /etc/nginx/conf.d/default.conf && \
    echo '        proxy_set_header Host $host;' >> /etc/nginx/conf.d/default.conf && \
    echo '    }' >> /etc/nginx/conf.d/default.conf && \
    echo '}' >> /etc/nginx/conf.d/default.conf

# Crear configuración de supervisor
RUN echo '[supervisord]' > /etc/supervisor/conf.d/supervisord.conf && \
    echo 'nodaemon=true' >> /etc/supervisor/conf.d/supervisord.conf && \
    echo 'user=root' >> /etc/supervisor/conf.d/supervisord.conf && \
    echo 'logfile=/data/logs/supervisor/supervisord.log' >> /etc/supervisor/conf.d/supervisord.conf && \
    echo 'pidfile=/var/run/supervisord.pid' >> /etc/supervisor/conf.d/supervisord.conf && \
    echo '' >> /etc/supervisor/conf.d/supervisord.conf && \
    echo '[program:nginx]' >> /etc/supervisor/conf.d/supervisord.conf && \
    echo 'command=nginx -g "daemon off;"' >> /etc/supervisor/conf.d/supervisord.conf && \
    echo 'autostart=true' >> /etc/supervisor/conf.d/supervisord.conf && \
    echo 'autorestart=true' >> /etc/supervisor/conf.d/supervisord.conf && \
    echo 'stderr_logfile=/data/logs/supervisor/nginx_error.log' >> /etc/supervisor/conf.d/supervisord.conf && \
    echo 'stdout_logfile=/data/logs/supervisor/nginx_access.log' >> /etc/supervisor/conf.d/supervisord.conf && \
    echo 'user=root' >> /etc/supervisor/conf.d/supervisord.conf && \
    echo '' >> /etc/supervisor/conf.d/supervisord.conf && \
    echo '[program:python-backend]' >> /etc/supervisor/conf.d/supervisord.conf && \
    echo 'command=python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 --workers 2' >> /etc/supervisor/conf.d/supervisord.conf && \
    echo 'directory=/app/backend-python' >> /etc/supervisor/conf.d/supervisord.conf && \
    echo 'autostart=true' >> /etc/supervisor/conf.d/supervisord.conf && \
    echo 'autorestart=true' >> /etc/supervisor/conf.d/supervisord.conf && \
    echo 'stderr_logfile=/data/logs/python/error.log' >> /etc/supervisor/conf.d/supervisord.conf && \
    echo 'stdout_logfile=/data/logs/python/access.log' >> /etc/supervisor/conf.d/supervisord.conf && \
    echo 'environment=PYTHONPATH="/app/backend-python"' >> /etc/supervisor/conf.d/supervisord.conf && \
    echo 'user=root' >> /etc/supervisor/conf.d/supervisord.conf && \
    echo '' >> /etc/supervisor/conf.d/supervisord.conf && \
    echo '[program:node-backend]' >> /etc/supervisor/conf.d/supervisord.conf && \
    echo 'command=npm start' >> /etc/supervisor/conf.d/supervisord.conf && \
    echo 'directory=/app/backend-node' >> /etc/supervisor/conf.d/supervisord.conf && \
    echo 'autostart=true' >> /etc/supervisor/conf.d/supervisord.conf && \
    echo 'autorestart=true' >> /etc/supervisor/conf.d/supervisord.conf && \
    echo 'stderr_logfile=/data/logs/node/error.log' >> /etc/supervisor/conf.d/supervisord.conf && \
    echo 'stdout_logfile=/data/logs/node/access.log' >> /etc/supervisor/conf.d/supervisord.conf && \
    echo 'onlyif=test -f /app/backend-node/package.json' >> /etc/supervisor/conf.d/supervisord.conf && \
    echo 'user=root' >> /etc/supervisor/conf.d/supervisord.conf

# Crear script de healthcheck
RUN echo '#!/bin/bash' > /usr/local/bin/healthcheck.sh && \
    echo 'set -e' >> /usr/local/bin/healthcheck.sh && \
    echo '' >> /usr/local/bin/healthcheck.sh && \
    echo '# Verificar nginx' >> /usr/local/bin/healthcheck.sh && \
    echo 'curl -f http://localhost/health || exit 1' >> /usr/local/bin/healthcheck.sh && \
    echo '' >> /usr/local/bin/healthcheck.sh && \
    echo '# Verificar backend Python' >> /usr/local/bin/healthcheck.sh && \
    echo 'curl -f http://localhost:8000/health || exit 1' >> /usr/local/bin/healthcheck.sh && \
    echo '' >> /usr/local/bin/healthcheck.sh && \
    echo '# Verificar backend Node.js (si existe)' >> /usr/local/bin/healthcheck.sh && \
    echo 'if [ -f "/app/backend-node/package.json" ]; then' >> /usr/local/bin/healthcheck.sh && \
    echo '    curl -f http://localhost:8005/health || exit 1' >> /usr/local/bin/healthcheck.sh && \
    echo 'fi' >> /usr/local/bin/healthcheck.sh && \
    echo '' >> /usr/local/bin/healthcheck.sh && \
    echo 'echo "All services healthy"' >> /usr/local/bin/healthcheck.sh

RUN chmod +x /usr/local/bin/healthcheck.sh

# Crear script de inicio
RUN echo '#!/bin/bash' > /start.sh && \
    echo '' >> /start.sh && \
    echo 'echo "🚀 Iniciando Cotizador de Consumo Solar - Sumpetrol SA"' >> /start.sh && \
    echo 'echo "========================================="' >> /start.sh && \
    echo 'echo "Versión: '${APP_VERSION}'"' >> /start.sh && \
    echo 'echo "Descripción: '${APP_DESCRIPTION}'"' >> /start.sh && \
    echo '' >> /start.sh && \
    echo '# Crear directorios necesarios' >> /start.sh && \
    echo 'mkdir -p /data/logs/nginx /data/logs/supervisor /data/logs/python /data/logs/node /var/log/nginx /var/cache/nginx /var/run /tmp/nginx' >> /start.sh && \
    echo '' >> /start.sh && \
    echo '# Verificar configuración de nginx' >> /start.sh && \
    echo 'nginx -t' >> /start.sh && \
    echo '' >> /start.sh && \
    echo '# Iniciar supervisor' >> /start.sh && \
    echo 'echo "🌐 Iniciando servicios..."' >> /start.sh && \
    echo 'exec /usr/bin/supervisord -c /etc/supervisor/conf.d/supervisord.conf' >> /start.sh

RUN chmod +x /start.sh

# Configurar permisos
RUN chown -R nginx:nginx /usr/share/nginx/html \
    && chown -R nginx:nginx /data/logs \
    && chmod -R 755 /data \
    && chmod -R 755 /app

# Exponer puertos
EXPOSE 80 8000 8005

# Healthcheck optimizado para EasyPanel
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD /usr/local/bin/healthcheck.sh

# Punto de entrada
ENTRYPOINT ["dumb-init", "--"]
CMD ["/start.sh"]