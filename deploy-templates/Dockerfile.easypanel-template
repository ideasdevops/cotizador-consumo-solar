# ===============================================
# DOCKERFILE OPTIMIZADO PARA EASYPANEL
# ===============================================
# Sistema de Deploy Autom치tico - IdeasDevOps
# Template optimizado para aplicaciones Python + Frontend
# ===============================================

# Argumentos de construcci칩n
ARG APP_NAME="mi-aplicacion"
ARG APP_VERSION="1.0.0"
ARG APP_DESCRIPTION="Aplicaci칩n desarrollada con IdeasDevOps Deploy System"
ARG PYTHON_REQUIREMENTS="requests python-dotenv pandas openpyxl schedule psutil"

# Imagen base: nginx + Python
FROM nginx:alpine

# Metadatos
LABEL maintainer="IdeasDevOps <admin@ideasdevops.com>"
LABEL app.name="${APP_NAME}"
LABEL app.version="${APP_VERSION}"
LABEL app.description="${APP_DESCRIPTION}"

# Variables de entorno
ENV APP_NAME=${APP_NAME}
ENV APP_VERSION=${APP_VERSION}
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV DEBIAN_FRONTEND=noninteractive

# Instalar dependencias del sistema
RUN apk add --no-cache \
    python3 \
    python3-dev \
    py3-pip \
    py3-setuptools \
    py3-wheel \
    build-base \
    linux-headers \
    supervisor \
    curl \
    bash \
    && ln -sf python3 /usr/bin/python \
    && ln -sf pip3 /usr/bin/pip

# Crear directorios necesarios
RUN mkdir -p /data/logs/nginx \
    /data/logs/supervisor \
    /data/backups \
    /app/backend-python \
    /app/backend-node \
    /usr/share/nginx/html \
    /etc/supervisor/conf.d

# Configurar nginx
COPY nginx-simple.conf /etc/nginx/nginx.conf

# Copiar frontend
COPY frontend/ /usr/share/nginx/html/

# Copiar backend Python
COPY backend-python/ /app/backend-python/

# Copiar backend Node.js (si existe)
COPY backend-node/ /app/backend-node/ 2>/dev/null || true

# Instalar dependencias Python
RUN cd /app/backend-python && \
    pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir ${PYTHON_REQUIREMENTS} && \
    pip install --no-cache-dir -r requirements.txt 2>/dev/null || true

# Instalar dependencias Node.js (si existe)
RUN if [ -f "/app/backend-node/package.json" ]; then \
        cd /app/backend-node && \
        npm ci --only=production; \
    fi

# Configurar supervisor
RUN cat > /etc/supervisor/conf.d/supervisord.conf << 'EOF'
[supervisord]
nodaemon=true
user=root
logfile=/data/logs/supervisor/supervisord.log
pidfile=/var/run/supervisord.pid

[program:nginx]
command=nginx -g "daemon off;"
autostart=true
autorestart=true
stderr_logfile=/data/logs/supervisor/nginx_error.log
stdout_logfile=/data/logs/supervisor/nginx_access.log

[program:python-backend]
command=python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 --workers 2
directory=/app/backend-python
autostart=true
autorestart=true
stderr_logfile=/data/logs/supervisor/python_error.log
stdout_logfile=/data/logs/supervisor/python_access.log
environment=PYTHONPATH="/app/backend-python"

[program:node-backend]
command=npm start
directory=/app/backend-node
autostart=true
autorestart=true
stderr_logfile=/data/logs/supervisor/node_error.log
stdout_logfile=/data/logs/supervisor/node_access.log
onlyif=test -f /app/backend-node/package.json
EOF

# Crear script de healthcheck
RUN cat > /usr/local/bin/healthcheck.sh << 'EOF'
#!/bin/bash
# Healthcheck para la aplicaci칩n
set -e

# Verificar nginx
curl -f http://localhost/health || exit 1

# Verificar backend Python
curl -f http://localhost:8000/health || exit 1

# Verificar backend Node.js (si existe)
if [ -f "/app/backend-node/package.json" ]; then
    curl -f http://localhost:8005/health || exit 1
fi

echo "All services healthy"
EOF

RUN chmod +x /usr/local/bin/healthcheck.sh

# Configurar permisos
RUN chown -R nginx:nginx /usr/share/nginx/html \
    && chown -R nginx:nginx /data/logs \
    && chmod -R 755 /data

# Exponer puertos
EXPOSE 80 8000 8005

# Healthcheck
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD /usr/local/bin/healthcheck.sh

# Comando de inicio
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]
